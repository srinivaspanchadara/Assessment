import os
import glob
import pandas as pd
from typing import List, Dict
from xml.etree import ElementTree as ET

class RO:
    def __init__(self, order_id, date_time, status, cost, technician, repair_parts):
        self.order_id = order_id
        self.date_time = date_time
        self.status = status
        self.cost = cost
        self.technician = technician
        self.repair_parts = repair_parts

def read_files_from_dir(dir_path: str, prefix: str) -> List[str]:
    files = glob.glob(os.path.join(dir_path, f"{prefix}*.xml"))
    xml_contents = []
    for file in files:
        with open(file, 'r') as f:
            xml_contents.append(f.read())
    return xml_contents

def parse_xml(files: List[str]) -> pd.DataFrame:
    data = []
    for xml_content in files:
        root = ET.fromstring(xml_content)
        for event in root.findall('event'):
            order_id = event.find('order_id').text
            date_time = pd.to_datetime(event.find('date_time').text)
            status = event.find('status').text
            cost = float(event.find('cost').text)
            technician = event.find('.//technician').text
            repair_parts = [{'name': part.attrib['name'], 'quantity': int(part.attrib['quantity'])} 
                            for part in event.findall('.//repair_parts/part')]
            data.append([order_id, date_time, status, cost, technician, repair_parts])
    columns = ['order_id', 'date_time', 'status', 'cost', 'technician', 'repair_parts']
    return pd.DataFrame(data, columns=columns)

def window_by_datetime(data: pd.DataFrame, window: str) -> Dict[str, pd.DataFrame]:
    data['window'] = pd.to_datetime(data['date_time']).dt.floor(window)
    windowed_data = {}
    for name, group in data.groupby('window'):
        windowed_data[name.strftime('%Y-%m-%d %H:%M:%S')] = group.sort_values(by='date_time').tail(1)
    return windowed_data

def process_to_RO(data: Dict[str, pd.DataFrame]) -> List[RO]:
    ro_list = []
    for _, row in pd.concat(data.values()).iterrows():
        ro = RO(order_id=row['order_id'], date_time=row['date_time'], status=row['status'],
                cost=row['cost'], technician=row['technician'], repair_parts=row['repair_parts'])
        ro_list.append(ro)
    return ro_list

def main(dir_path: str, prefix: str, window: str, db_file: str):
    xml_contents = read_files_from_dir(dir_path, prefix)
    df = parse_xml(xml_contents)
    windowed_data = window_by_datetime(df, window)
    ro_list = process_to_RO(windowed_data)
    
    # Code to store ROs in SQLite database
    
if __name__ == "__main__":
    main("path_to_directory", "prefix", "1D", "path_to_database.db")
